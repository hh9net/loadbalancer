package lb

import (
    "encoding/base64"
    "fmt"
    "io/ioutil"
    "net/http"
    "strings"
)

var DevMode = {{.DevMode}}
var cachedFiles = make(map[string][]byte)

func GetResource(key string) ([]byte, error) {
    if DevMode {
        b, err := ioutil.ReadFile(key)
        return b, err
    } else {
        if content, exists := cachedFiles[key]; exists {
            return content, nil
        }
        b, exists := _files[key]
        if !exists {
            return nil, fmt.Errorf("%v does not exist", key)
        }
        content, err := base64.StdEncoding.DecodeString(b)
        if err == nil {
            cachedFiles[key] = content
        }
        return content, err
    }
}

func ServeResource(w http.ResponseWriter, req *http.Request) {
    key := strings.Replace(req.URL.Path, "/", "", 1)
    b, err := GetResource(key)
    if err != nil {
		http.NotFound(w, req)
    } else {
        if strings.HasSuffix(key, ".css") {
            w.Header().Set("Content-Type", "text/css")
        }
        // TODO set better headers
        w.Write(b)
    }
}

var _files = map[string]string {
{{range $k, $v := .Files}}
"{{$k}}": "{{$v}}",
{{end}}
}
